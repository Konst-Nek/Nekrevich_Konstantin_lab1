using Microsoft.VisualBasic.FileIO;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text.RegularExpressions;

namespace main
{
    enum Game_Status
    {
        Created,
        Started,
        Ended
    }
    enum Status
    {
        Not_in_Game,
        Playing,
        Loser,
        Winner
    }
    class Player
    {
        public string player_name;
        public int position;
        public Status status;
        public int walked_distance;
        public Player(string name = "X")
        {
            this.player_name = name;
            this.walked_distance = 0;
            this.position = 0;
            this.status = Status.Not_in_Game;
        }
        public void Move(int steps, int field) // Перерасчёт позиции
        {
            this.walked_distance += Math.Abs(steps);
            if (Math.Abs(steps) > field) // Если |шаг| > размера поля
            {
                if (Math.Abs(steps) > field)
                {
                    steps = steps % field;
                }
                this.position += steps;
            }
            else // Если шаг < размера поля
            {
                this.position += steps;
            }
            if (this.position > field) // Перерасчёт позиции если она > поля
            {
                this.position = this.position % field;
            }
            else if (this.position < 0) // Перерасчёт позиции если она < поля
            {
                this.position = field - (Math.Abs(this.position) % field);
            }
        }
    }
    class Game
    {
        public int field_size;
        public String input_path;
        public String output_path;
        public Player cat;
        public Player mouse;
        public Game_Status status;
        public Game()
        {
            this.field_size = 0;
            this.input_path = "";
            this.output_path = "";
            this.cat = new Player("Cat");
            this.mouse = new Player("Mouse");
            this.status = Game_Status.Created;
        }
        public Game(String input_path, String output_path)
        {
            this.field_size = 0;
            this.input_path = input_path;
            this.output_path = output_path;
            this.cat = new Player("Cat");
            this.mouse = new Player("Mouse");
            this.status = Game_Status.Created;
        }
        public int Get_Distance() // Расстояние
        {
            /*if (Math.Abs(this.cat.position -  this.mouse.position) < field_size - Math.Abs(this.cat.position - this.mouse.position))
            {
                return Math.Abs(this.cat.position - this.mouse.position);
            }
            else
            {
                return field_size - Math.Abs(this.cat.position - this.mouse.position);
            }*/
                return Math.Abs(this.cat.position - this.mouse.position); // Не самое короткое расстояние
        }
        public void Print() // Запись в файл
        {
            using (StreamWriter sr = new StreamWriter(this.output_path, true))
            {
                if (this.cat.status == Status.Not_in_Game && this.mouse.status == Status.Not_in_Game)
                {
                    sr.WriteLine($"??\t??\t??");
                }
                else if (this.cat.status == Status.Not_in_Game)
                {
                    sr.WriteLine($"??\t{this.mouse.position + 1}\t??");
                }
                else if (this.mouse.status == Status.Not_in_Game)
                {
                    sr.WriteLine($"{this.cat.position + 1}\t??\t??");
                }
                else
                {
                    sr.WriteLine($"{this.cat.position + 1}\t{this.mouse.position + 1}\t{Get_Distance()}");
                }
            }
        }
        public void Run() // Запуск игры
        {
            this.status = Game_Status.Started;
            using (StreamWriter sr = new StreamWriter(this.output_path, false))
            {
                sr.WriteLine("Cat and mouse");
                sr.WriteLine();
                sr.WriteLine("Cat\tMouse\tDistance");
                sr.WriteLine("---------------------------------------");
            }
            while (this.status != Game_Status.Ended) // Начало
            {
                using (StreamReader sr = new StreamReader(this.input_path))
                {
                    String line = sr.ReadLine();
                    while (int.TryParse(line, out int res) != true)
                    {
                        line = sr.ReadLine();
                    }
                    this.field_size = Convert.ToInt32(line);
                    while (sr.EndOfStream != true)
                    {
                        line = sr.ReadLine();
                        if (String.IsNullOrEmpty(line) == true || String.IsNullOrWhiteSpace(line))
                        {
                            continue;
                        }
                        switch (line[0])
                        {
                            case 'C': 
                                if  (this.cat.status == Status.Not_in_Game) // Если кот ещё не в игре
                                {
                                    this.cat.position = Convert.ToInt32(line.Substring(1)) - 1;
                                    this.cat.status = Status.Playing;
                                }
                                else
                                {
                                    this.cat.Move(Convert.ToInt32(line.Substring(1)), this.field_size);
                                }
                                break;
                            case 'M':
                                if (this.mouse.status == Status.Not_in_Game) // Если мышь ещё не в игре
                                {
                                    this.mouse.position = Convert.ToInt32(line.Substring(1)) - 1;
                                    this.mouse.status = Status.Playing;
                                }
                                else
                                {
                                    this.mouse.Move(Convert.ToInt32(line.Substring(1)), this.field_size);
                                }
                                break;
                            case 'P': Print(); break;
                            default: break;
                        }
                        if (this.cat.position == this.mouse.position && this.cat.status == Status.Playing && this.mouse.status == Status.Playing) // Если мышь была словлена котом
                        {
                            this.cat.status = Status.Winner;
                            this.mouse.status = Status.Loser;
                            this.status = Game_Status.Ended;
                            break;
                        }
                    }
                }
                this.status = Game_Status.Ended; // Конец
            }
            using (StreamWriter sr = new StreamWriter(this.output_path, true)) // Запись результатов в файл
            {
                sr.WriteLine("---------------------------------------");
                sr.WriteLine($"Distance traveled by cat: {this.cat.walked_distance}");
                sr.WriteLine($"Distance traveled by mouse: {this.mouse.walked_distance}");
                if (this.cat.status == Status.Winner)
                {
                    sr.WriteLine($"Mouse was caught at: {this.cat.position + 1}");
                }
                else
                {
                    this.cat.status = Status.Loser;
                    this.mouse.status = Status.Winner;
                    sr.WriteLine("Mouse evaded cat");
                }
            }
        }
    }
    class Prog
    {
        public static void Main(string[] args)
        {
            String input_path = "C:\\Users\\noob1\\source\\repos\\lab2\\lab2\\1.ChaseData.txt"; // Путь к исходным данным
            String output_path = "C:\\Users\\noob1\\source\\repos\\lab2\\lab2\\PursuitLog.txt"; // Путь куда записать результаты
            Game game = new Game(input_path, output_path);
            game.Run(); 
        }
    }
}
